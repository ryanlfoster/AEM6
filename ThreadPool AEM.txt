package ne.skysupport.servlet;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Future;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.io.FileUtils;
import org.apache.felix.scr.annotations.Properties;
import org.apache.felix.scr.annotations.Property;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.sling.SlingServlet;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.commons.osgi.OsgiUtil;
import org.apache.sling.commons.osgi.PropertiesUtil;
import org.apache.sling.commons.threads.ModifiableThreadPoolConfig;
import org.apache.sling.commons.threads.ThreadPool;
import org.apache.sling.commons.threads.ThreadPoolConfig.ThreadPriority;
import org.apache.sling.commons.threads.ThreadPoolManager;
import org.osgi.service.component.ComponentContext;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.sky.shaker.cinema.gsa.servlet.GSAMovieSearchBaseServlet;
import com.sky.shaker.cinema.gsa.util.GSAConstants;

@SlingServlet(paths={"/services/GSAAssistenzaESupporto/gsaAssistenza.do"}, label= "ne.skysupport.servlet.gsaAssistenza",description = "GSAAssistenzaESupporto - GSAAssistenzaESupporto servlet", metatype=true)


@Properties({
	@Property(name="application-path", value="sky/assistenza_e_supporto/GSASupportSearch",propertyPrivate=false),
    @Property(name="error.page", value="/config/error.txt",propertyPrivate=false),
    @Property(name="sky-style-sheet", value="/config/support_style_sheet.xsl",propertyPrivate=false),
    @Property(name="num_risultati_parziali", value="3",propertyPrivate=false),
    @Property(name="num_risultati_singola", value="10",propertyPrivate=false),
    @Property(name="base.url.search", value="http://10.73.17.49/search?",propertyPrivate=false),
    @Property(name="collection_sapere", value="sky_support_sapere",propertyPrivate=false),
    @Property(name="collection_gestire", value="sky_support_gestire",propertyPrivate=false),
    @Property(name="collection_risolvere", value="sky_support_risolvere",propertyPrivate=false),
    @Property(name = "filter_documenti", value = { "html" }, cardinality = Integer.MAX_VALUE, label = "Filtro documenti", description = "Inserire lista estensioni file da filtrare"),
    @Property(name = "filter_demo", value = { "demo" }, cardinality = Integer.MAX_VALUE, label = "Filtro metatag demo", description = "Inserire lista estensioni file da filtrare"),
    @Property(name = "filter_pdf", value = { "pdf" }, cardinality = Integer.MAX_VALUE, label = "Filtro pdf", description = "Inserire lista estensioni file da filtrare"),
    @Property(name = "filter_video", value = { "flv" }, cardinality = Integer.MAX_VALUE, label = "Filtro video", description = "Inserire lista estensioni file da filtrare"),
    @Property(name = "filter_immagini", value = {
			"jpeg", "gif", "png" }, cardinality = Integer.MAX_VALUE, label = "Filtro immagini", description = "Inserire lista estensioni file da filtrare")	
})


public class GSAAssistenzaESupportoServlet extends GSAMovieSearchBaseServlet  {
	
	private static final long serialVersionUID = -651021388016906206L;
		
	@Reference
    private ThreadPoolManager threadPoolManager;

    /** your thread pool */
    private ThreadPool threadPool;
	
	static final
	private String	PARAM_Q 				= "q",
					PARAM_START				= "start",
					PARAM_NUM				= "num",
					PARAM_START_VALUE 		= "0",
					PARAM_NUM_VALUE 		= "10",
					PARAM_SECTION 			= "collection",
					PARAM_FILE_FILTERS      = "file_filters",
					FRONT_END_USER_DEFAULT  = "search_support";
	static private String COLLECTION_SAPERE;
	static private String COLLECTION_GESTIRE;
	static private String COLLECTION_RISOLVERE;
	protected String baseUrl;
	protected String numParziali;
	protected String numSingola;
	protected String[] filter_documenti; 
	protected String[] filter_immagini; 
	protected String[] filter_pdf; 
	protected String[] filter_demo;
	protected String[] filter_video;
	
	protected void activate(ComponentContext componentContext){
		ModifiableThreadPoolConfig threadPoolConfig = new ModifiableThreadPoolConfig();
	    //You can make this configurable as well
	    threadPoolConfig.setPriority(ThreadPriority.NORM);
	    this.threadPool = threadPoolManager.create(threadPoolConfig);
	    if(threadPool == null) {
	      throw new IllegalStateException("Could not get a ThreadPool");
	    }
			configure(componentContext.getProperties());
		}
		
	protected void configure(Dictionary<?, ?> properties) {
		applicationPath = OsgiUtil.toString(properties.get("application-path"), null);
		errorPage=OsgiUtil.toString(properties.get("error.page"), null);
		styleSheet=OsgiUtil.toString(properties.get("sky-style-sheet"), null);
		applicationProperties= OsgiUtil.toString(properties.get("application-properties"), null);
		baseUrl = OsgiUtil.toString(properties.get("base.url.search"), null);
		numParziali = OsgiUtil.toString(properties.get("num_risultati_parziali"), null);
		numSingola  = OsgiUtil.toString(properties.get("num_risultati_singola"), null);
	    filter_documenti = PropertiesUtil.toStringArray(properties.get("filter_documenti"));
		filter_immagini = PropertiesUtil.toStringArray(properties.get("filter_immagini"));
		filter_pdf = PropertiesUtil.toStringArray(properties.get("filter_pdf"));
		filter_demo  = PropertiesUtil.toStringArray(properties.get("filter_demo"));
		filter_video  = PropertiesUtil.toStringArray(properties.get("filter_video"));
		COLLECTION_SAPERE = OsgiUtil.toString(properties.get("collection_sapere"), null);
		COLLECTION_GESTIRE = OsgiUtil.toString(properties.get("collection_gestire"), null);
		COLLECTION_RISOLVERE = OsgiUtil.toString(properties.get("collection_risolvere"), null);
		 /* Carico l'eventuale file di configurazione della webapp */
	    try {
	    	this.prop = new java.util.Properties();
			prop.load(new FileInputStream(confPath+applicationPath+OsgiUtil.toString(properties.get("application-properties"), null) ));
          
			if (logger.isDebugEnabled())
				logger.debug(MessageFormat.format("Configuration file <{0}> correctly loaded",new Object[] { confPath+applicationPath+OsgiUtil.toString(properties.get("application-properties"), null) }));

		 } catch (IOException ioe) {
			logger.error(ioe.getMessage());
		 }
		//logger.debug("GSAMovieSearchServlet baseUrl ..." + baseUrl);
		 }
	private String getFilterString(String file_filters) throws UnsupportedEncodingException
	{
		String output = "";
		if(file_filters.equals(""))
		{
			return output;
		}
		String[] filtri = file_filters.split(":"); 
		//applico filtri
		int fileFilterCounter = 0;
		for(String filtro : filtri)
		{
			if(!filtro.startsWith("F"))
			{
				continue;
			}
			if(fileFilterCounter == 0)
			{
				output = "";
			}
			if(output.length() > 0)
			{
				output = output + URLEncoder.encode(" OR ", "UTF-8");
			}
			if(filtro.equals("Fdocumenti"))
			{
				output = output + createFilterStringFromProperties(filter_documenti);
			}
			else if(filtro.equals("Fimmagini"))
			{
				output = output + createFilterStringFromProperties(filter_immagini);
			}
			else if(filtro.equals("Fpdf"))
			{
				output = output + createFilterStringFromProperties(filter_pdf);
			}
			else if(filtro.equals("Fvideo"))
			{
				output = output + createFilterStringFromProperties(filter_video);
			}
			fileFilterCounter++;
		}
		//applico filtri meta
		String outputMetaFilter = "";
		int metaFilterCounter = 0;
		for(String filtro : filtri)
		{
			if(!filtro.startsWith("M"))
			{
				continue;
			}
			if(metaFilterCounter == 0)
			{
				outputMetaFilter = "&requiredfields=";
			}
			if(outputMetaFilter.length() > 16)
			{
				outputMetaFilter = outputMetaFilter + "|";
			}
			if(filtro.equals("Mdemo"))
			{
				outputMetaFilter = outputMetaFilter + createMetaFilterStringFromProperties(filter_demo);
			}
			metaFilterCounter++;
		}
		logger.debug("getFilterStrting:" + output + outputMetaFilter);
		
		if(output.length() > 0)
		{
			output = URLEncoder.encode(" ", "UTF-8") + output;
		}
		
		return output + outputMetaFilter ;
	}
	private String createMetaFilterStringFromProperties(String[] estensioni) throws UnsupportedEncodingException
	{
		String output = "";
		for(String estensione : estensioni)
		{
			if(output.length() > 0)
			{
				output = output + "|";
			}
			output = output + URLEncoder.encode(estensione, "UTF-8");
		}
		return output;
	}
	private String createFilterStringFromProperties(String[] estensioni) throws UnsupportedEncodingException
	{
		String output = "";
		for(String estensione : estensioni)
		{
			if(output.length() > 0)
			{
				output = output + URLEncoder.encode(" OR ", "UTF-8");
			}
			output = output + "filetype:" + estensione;
		}
		return output;
	}
	
	private Callable<String> createCallable(final String paramStr){

	    Callable<String> aCallable = new Callable<String>(){
	        public String call(){
	        	try {
	        	    Thread.sleep(1000);                 //1000 milliseconds is one second.
	        	} catch(InterruptedException ex) {
	        	    Thread.currentThread().interrupt();
	        	}
	        	logger.debug("aCallable EXECUTED");
	            return "Run";
	        }
	    };

	    return aCallable;

	}
	
	private Runnable createRunnable(final String paramStr){

		Runnable aRunnable = new Runnable(){
	        public void run(){
	        	try {
	        	    Thread.sleep(1000);                 //1000 milliseconds is one second.
	        	} catch(InterruptedException ex) {
	        	    Thread.currentThread().interrupt();
	        	}
	           logger.debug("thread EXECUTED");
	        }
	    };

	    return aRunnable;

	}
	
	protected void doGet( SlingHttpServletRequest request, SlingHttpServletResponse response ) throws ServletException, IOException { 

				
	    Runnable YOUR_CUSTOM_THREAD = new Thread(createRunnable("abcd"));
	    List<Future<String>> futures = new ArrayList<Future<String>>(10);
	    
	    for(int i = 0; i < 10; i++)
	    {
	    	futures.add(this.threadPool.submit(createCallable("abcd")));
	    }
	    for(Future<String> future : futures)
	    {
	    	try {
				String result = future.get();
				logger.debug("valore FUTURE:" + result);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    }
	    
	    logger.debug("SCAVALLATo");
	    
	    
	    
	    
		if ( isRequestParameterNullAndEmpty(request, PARAM_Q))
		{
		
			this.logger.debug( "Nessun parametro specificato per la ricerca" );
			response.sendError( HttpServletResponse.SC_BAD_REQUEST );
			return;	
		}
		
		StringBuffer url_generic = new StringBuffer();
		StringBuffer url_sky_section_sapere = null;
		StringBuffer url_sky_section_gestire = null;
		StringBuffer url_sky_section_risolvere = null;
		String collection = "";
		if ( !isRequestParameterNullAndEmpty(request, PARAM_Q)) {
			String start = URLDecoder.decode(getRequestParameterDefault(request, PARAM_START, PARAM_START_VALUE), "ISO-8859-1");
			String num = URLDecoder.decode(getRequestParameterDefault(request, PARAM_NUM, PARAM_NUM_VALUE), "ISO-8859-1");
			String q = URLDecoder.decode(request.getParameter(PARAM_Q), "ISO-8859-1");
			String file_filters = URLDecoder.decode(getRequestParameterDefault(request, PARAM_FILE_FILTERS, ""), "ISO-8859-1");
			collection = URLDecoder.decode(getRequestParameterDefault(request, PARAM_SECTION, ""), "ISO-8859-1");
			logger.debug("stringa file_filters:" + file_filters );
						
			q = URLEncoder.encode(q, "UTF-8");
			
			if(!getFilterString(file_filters).equals(""))
			{
				q = q + getFilterString(file_filters);
			}
			
			url_generic.append(baseUrl)
			.append("q=")
			.append(q)
			.append("&")
			.append(PARAM_START)
			.append("=")
			.append(start)
			.append("&lr=lang_it")
			.append("&output=")
			.append(GSAConstants.OUTPUT)
			.append("&client=")
			.append(FRONT_END_USER_DEFAULT)
			.append("&")
			.append("filter=")
			.append(GSAConstants.FILTER);
//			.append("&")
//			.append(GSAConstants.GET_META)
//			.append("=")
//			.append(GSAConstants.META_DATA);
			if(collection.equals(""))
			{
				url_generic.append("&")
				.append("num=")
				.append(numParziali);
			}
			else
			{
				url_generic.append("&")
				.append("num=")
				.append(numSingola);
			}
			
			url_sky_section_sapere = new StringBuffer(url_generic.toString());
			url_sky_section_gestire = new StringBuffer(url_generic.toString());
			url_sky_section_risolvere = new StringBuffer(url_generic.toString());
			url_sky_section_sapere.append("&site=").append(COLLECTION_SAPERE);
			url_sky_section_gestire.append("&site=").append(COLLECTION_GESTIRE);
			url_sky_section_risolvere.append("&site=").append(COLLECTION_RISOLVERE);
		}
		/* Recupero i request headers */
		Map<String, String> requestHeaderMap = new Hashtable<String, String>();
		requestHeaderMap.put("accept-language", "it-it,it");
		requestHeaderMap.put("accept", "text/html,application/xhtml+xml,application/xml");
		requestHeaderMap.put("accept-charset", "ISO-8859-1,utf-8");
		requestHeaderMap.put("user-agent", request.getHeader("user-agent"));
		
		this.logger.debug( MessageFormat.format("GSAAssistenzaESupportoSearchServlet - requestHeader: {0}  ", requestHeaderMap));
		
		
		
		
		byte[] data =null;
		try {
			if(collection.equals(""))
			{
				data = getAllSectionsResults( requestHeaderMap, url_sky_section_sapere.toString(), url_sky_section_gestire.toString(), url_sky_section_risolvere.toString());
			}
			else if(collection.equals(COLLECTION_SAPERE))
			{
				data = getSingleSectionResults( requestHeaderMap, url_sky_section_sapere.toString(),COLLECTION_SAPERE);
			}
			else if(collection.equals(COLLECTION_GESTIRE))
			{
				data = getSingleSectionResults( requestHeaderMap, url_sky_section_gestire.toString(),COLLECTION_GESTIRE);
			}
			else if(collection.equals(COLLECTION_RISOLVERE))
			{
				data = getSingleSectionResults( requestHeaderMap, url_sky_section_risolvere.toString(),COLLECTION_RISOLVERE);
			}
		} catch (ParserConfigurationException e) {
		
			e.printStackTrace();
		} catch (TransformerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		response.setContentType( "text/html" );
		response.setContentLength( data.length );
		response.getOutputStream().write( data );
		
	}
	
	
	private byte[] getAllSectionsResults( Map<String, String> requestHeaderMap, String url_sky_section_sapere, String url_sky_section_gestire, String url_sky_section_risolvere) throws IOException, ParserConfigurationException, TransformerException
	{
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		bos = getXMLDocumentForSections( bos,url_sky_section_sapere, url_sky_section_gestire, url_sky_section_risolvere, requestHeaderMap);
		return bos.toByteArray();
	}
	
	private byte[] getSingleSectionResults( Map<String, String> requestHeaderMap, String url_section, String collection) throws IOException, ParserConfigurationException, TransformerException
	{
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		bos = getXMLDocumentForSingleSection( bos,url_section, requestHeaderMap, collection);
		return bos.toByteArray();
	}
	
	private ByteArrayOutputStream getXMLDocumentForSingleSection(ByteArrayOutputStream bos, String url_section, Map<String, String> requestHeaderMap, String collection) throws IOException, ParserConfigurationException, TransformerException
	{
		/* Recupero il document XML con i risultati della ricerca */
		Document document = getSearchResultDocument( url_section, null, false, requestHeaderMap);
		document = cleanDocumentQ(document);
		Document wrapped = getWrappedXML(document, collection);
		return createXml(wrapped, bos);
	}
	private ByteArrayOutputStream getXMLDocumentForSections(ByteArrayOutputStream bos, String url_sky_section_sapere, String url_sky_section_gestire, String url_sky_section_risolvere, Map<String, String> requestHeaderMap) throws IOException, ParserConfigurationException, TransformerException
	{
		
		/* Recupero i documenti XML con i risultati della ricerca */
		Document document_sapere = getSearchResultDocument( url_sky_section_sapere, null, false, requestHeaderMap);
		document_sapere = cleanDocumentQ(document_sapere);
		Document document_gestire = getSearchResultDocument( url_sky_section_gestire, null, false, requestHeaderMap);
		document_gestire = cleanDocumentQ(document_gestire);
		Document document_risolvere = getSearchResultDocument( url_sky_section_risolvere, null, false, requestHeaderMap);
		document_risolvere = cleanDocumentQ(document_risolvere);
		Document wrapped = getWrappedXML(document_sapere,document_gestire,document_risolvere);
		
		return createXml(wrapped, bos);
	}
	
	private Document cleanDocumentQ(Document doc)
	{
		XPath 		xpath 	= null;
		XPathExpression xpe = null;
		NodeList myNodeList = null;
		try {
			xpath = XPathFactory.newInstance().newXPath();
			myNodeList = (NodeList) xpath.compile("/GSP/Q/text()")
			           .evaluate(doc, XPathConstants.NODESET);
		} catch (XPathExpressionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return doc;
		}
		String originalValue= myNodeList.item(0).getNodeValue();
		myNodeList.item(0).setNodeValue(originalValue.replaceFirst("(.*?) filetype(.*)", "$1"));
		return doc;
	}
	
	private ByteArrayOutputStream createXml(Document document, ByteArrayOutputStream bos) throws UnsupportedEncodingException, IOException
	{
		if (document == null) {
			//String errorPage = prop.getProperty( "error.page" );
			String errorPage = FileUtils.readFileToString(new File(confPath+applicationPath+this.errorPage)); 
			bos.write( errorPage.getBytes("UTF-8") );
			bos.flush();
			//response.sendRedirect(errorPage);
			//return;
		}
		else 
		{
			Element elRoot = document.getDocumentElement();
			if ( elRoot != null ) {				
				String xslFilename = confPath+applicationPath+styleSheet;
				// 
				String res = applyXslToDocument( document, xslFilename );
				res = res.contains("<?xml version=\"1.0\" encoding=\"UTF-8\"?>") ? res.substring("<?xml version=\"1.0\" encoding=\"UTF-8\"?>".length(),res.length()) : res;
				if ( res != null ) {
					bos.write( res.getBytes("UTF-8") );
					bos.flush();
				} else 
					bos.reset();
			}		
		}
		return bos;
	}
	private Document getWrappedXML(Document document_sapere, Document document_gestire, Document document_risolvere) throws ParserConfigurationException, IOException, TransformerException
	{
		Element oldRootSapere = document_sapere.getDocumentElement();
		Element oldRootGestire = document_gestire.getDocumentElement();
		Element oldRootRisolvere = document_risolvere.getDocumentElement();
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document output = builder.newDocument();
        Document newDocSapere = builder.newDocument();
		Document newDocGestire = builder.newDocument();
		Document newDocRisolvere = builder.newDocument();
		Element rootOutput = output.createElement("risultati");
        Element newRootSapere = newDocSapere.createElement("risultatisapere");
        Element newRootGestire = newDocGestire.createElement("risultatigestire");
        Element newRootRisolvere = newDocRisolvere.createElement("risultatirisolvere");
        newDocSapere.appendChild(newRootSapere);
        newRootSapere.appendChild(newDocSapere.importNode(oldRootSapere, true));
        newDocGestire.appendChild(newRootGestire);
        newRootGestire.appendChild(newDocGestire.importNode(oldRootGestire, true));
        newDocRisolvere.appendChild(newRootRisolvere);
        newRootRisolvere.appendChild(newDocRisolvere.importNode(oldRootRisolvere, true));
        rootOutput.appendChild(output.importNode(newDocSapere.getDocumentElement(), true));
        rootOutput.appendChild(output.importNode(newDocGestire.getDocumentElement(), true));
        rootOutput.appendChild(output.importNode(newDocRisolvere.getDocumentElement(), true));
        output.appendChild(rootOutput);
        printDocument(output);
        return output;
	}
	private Document getWrappedXML(Document document, String collection) throws ParserConfigurationException, IOException, TransformerException
	{
		Element oldRoot = document.getDocumentElement();
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document output = builder.newDocument();
      
		Element newRoot = null;
		if(collection.equals(COLLECTION_SAPERE))
		{
			newRoot = output.createElement("risultatisapere");
		}
		else if(collection.equals(COLLECTION_GESTIRE))
		{
			newRoot = output.createElement("risultatigestire");
		}
		else if(collection.equals(COLLECTION_RISOLVERE))
		{
			newRoot = output.createElement("risultatirisolvere");
		}
		newRoot.appendChild(output.importNode(oldRoot, true));
		output.appendChild(newRoot);
		printDocument(output);
        return output;
	}
	private Element setSingleAttribute(Element e)
	{
		e.setAttribute("isSingle", "true");
		return e;
	}
	
	public void printDocument(Document doc) throws IOException, TransformerException {
	    TransformerFactory tf = TransformerFactory.newInstance();
	    Transformer transformer = tf.newTransformer();
	    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
	    transformer.setOutputProperty(OutputKeys.METHOD, "xml");
	    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
	    transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
	    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

	   
	  //create a StringWriter for the output
	    StringWriter outWriter = new StringWriter();
	    StreamResult result = new StreamResult( outWriter );
	    transformer.transform( new DOMSource(doc), result );  
	    StringBuffer sb = outWriter.getBuffer(); 
	    String finalstring = sb.toString();
	    logger.debug(finalstring);
	}
	@Override
	protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) 
	throws ServletException, IOException { 
		doGet(request, response);
	}

}